<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="PictureBox1.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="PictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>